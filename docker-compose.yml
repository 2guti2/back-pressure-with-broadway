version: '3.2'
# docker-compose up
services:

  # doc: https://www.rabbitmq.com/management-cli.html
  # url: http://localhost:15672
  # username: guest
  # password: guest
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:15672" ]
      interval: 30s
      timeout: 10s
      retries: 5

  # https://github.com/hivemq/mqtt-cli
  # mqtt sub -t topic
  # mqtt pub -t topic -m 'Hello'
  # mosquitto_sub -q 2 -t \$share/cluster/device/+/telemetry
  # mosquitto_pub -t device/1234/telemetry -m "{\"key\": \"value\"}"
  mosquitto:
    image: eclipse-mosquitto
    container_name: 'mosquitto'
    ports:
      - 1883:1883
      - 8883:8883
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
    restart: unless-stopped

  ## TODO
  ## - use logger
  ## - try to split broadway in different nodes (one by sub)
  ##    - for this we will need the api to keep subscriptions... broadway asks api for each message?diag
  ## https://elixirschool.com/en/lessons/advanced/otp-distribution/
  ## https://elixir-lang.org/getting-started/mix-otp/distributed-tasks.html
  ## https://elixir-lang.org/getting-started/mix-otp/dynamic-supervisor.html
  ## - use batch id to split by subscriber
  ## - use partitions https://hexdocs.pm/broadway/Broadway.html

  # docker exec -it producer /bin/sh
  # iex -S mix
  # MqttToAmqp.TelemetrySender.send(12345, "{\"key\": \"value\"}")
  mqtt_to_amqp:
    build: ./mqtt_to_amqp
    # container_name: 'producer'
    volumes:
      - ./mqtt_to_amqp:/home/app
    environment:
      - AMQP_HOST=rabbitmq
      - MQTT_HOST=mosquitto
    depends_on:
      - rabbitmq
    restart: on-failure
    deploy:
      mode: replicated
      replicas: 2

  # probably should create topic if it doesn't exist
  amqp_to_http:
    build: ./amqp_to_http
    container_name: 'consumer'
    volumes:
      - ./amqp_to_http:/home/app
    environment:
      - AMQP_HOST=rabbitmq
      - HTTP_HOST=http_to_html
    restart: on-failure
    depends_on:
      - rabbitmq

  http_to_html:
    build: ./http_to_html
    container_name: 'viewer'
    ports:
      - 4000:4000
    volumes:
      - ./http_to_html:/home/app
